on:
  push:
    branches:
      - main
      - develop

env:
  CLUSTER_NAME: "infra-hackathon"  # Nome do cluster EKS
  SONAR_REQUIRED_SCORE: 60  # Nome do cluster EKS

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Rodar os testes e gerar o relatório de cobertura
      - name: Run tests and generate coverage report
        run: |
          ls
          coverage3 run -m pytest
          coverage3 xml

      - name: Extract repository name
        id: repo-name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      # Instalar o SonarQube Scanner
      - name: Set up SonarQube Scanner
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # analysis token associated to your project
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}

      - name: Delay for SonarQube Scanner
        run: sleep 15

      # Aguardar o resultado da análise e obter o status da qualidade
      - name: Check SonarQube quality gate status
        run: |
          STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }} "${{ secrets.SONAR_URL }}/api/qualitygates/project_status?projectKey=$REPO_NAME" | jq -r .projectStatus.status)
          echo "SonarQube Quality Gate  status: $STATUS"
          if [[ "$STATUS" != "OK" ]]; then
            echo "SonarQube Quality Gate failed: Quality is below the threshold!";
            exit 1;
          fi

          # Verificar a pontuação de qualidade se necessário
          SCORE=$(curl -s -u ${{ secrets.SONAR_TOKEN }} "${{ secrets.SONAR_URL }}/api/measures/component?component=$REPO_NAME&metricKeys=coverage" | jq -r .component.measures[0].value)
          echo "SonarQube quality score: $SCORE"
          if (( $(echo "$SCORE < $SONAR_REQUIRED_SCORE" | bc -l) )); then
            echo "SonarQube Quality Gate failed: Quality score is less than 80%!";
            exit 1;
          fi
          echo "SonarQube quality score is OK"

  build-and-push-ecr:
    name: Push Docker Image to AWS ECR
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Etapa 1: Checkout do código
      - name: Checkout code
        uses: actions/checkout@v4

      # Etapa 2: Configurar AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Etapa 3: Autenticar no Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

       # Etapa 4: Extrair o nome do repositório
      - name: Extract repository name
        id: repo-name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      # Etapa 5: Construir a imagem Docker
      - name: Build Docker image
        run: |
          docker build -t $REPO_NAME:latest .
          docker tag $REPO_NAME:latest ${{ steps.login-ecr.outputs.registry }}/$REPO_NAME:latest

      # Etapa 6: Criar o repositório no ECR se não existir
      - name: Create ECR repository if it doesn't exist
        id: check-image
        run: |
          aws ecr create-repository --repository-name $REPO_NAME
        continue-on-error: true

      # Etapa 7: Push da imagem Docker para o ECR
      - name: Force Push Docker Image if exists
        if: steps.check-image.outputs.result != 'Image does not exist'
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/$REPO_NAME:latest
          echo "::set-output name=registry::${{ steps.login-ecr.outputs.registry }}"

      # Etapa 8: Verificar se o EKS já foi criado
      - name: Check if EKS cluster exists
        run: |
          aws eks describe-cluster --name $CLUSTER_NAME --region ${{ secrets.AWS_REGION }} || exit 1
        continue-on-error: false  # Caso o cluster não exista, o workflow falha aqui

  kubernetes-deploy:
    name: Deploy Application to EKS
    runs-on: ubuntu-latest
    needs: build-and-push-ecr

    steps:
      # Etapa 1: Checkout do código
      - name: Checkout code
        uses: actions/checkout@v4

      # Etapa 2: Configurar AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Etapa 3: Autenticar no Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Etapa 4: Configurar kubectl para interagir com o EKS
      - name: Configure kubectl
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name $CLUSTER_NAME

      # Etapa 5: Definir as variáveis de ambiente
      - name: Set environment variables
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "QUEUE_URL=${{ secrets.QUEUE_URL }}" >> $GITHUB_ENV
          echo "USER_API_URL==${{ secrets.USER_API_URL }}" >> $GITHUB_ENV
          echo "JWT_SECRET==${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV

      # Etapa 6: Substituir variáveis nos arquivos Kubernetes
      - name: Substitute variables in deployment.yaml
        run: |
          envsubst < k8s/deployment.yaml > k8s/deployment-final.yaml
#          cat k8s/deployment-final.yaml

      - name: Substitute variables in service.yaml
        run: |
          envsubst < k8s/service.yaml > k8s/service-final.yaml
#          cat k8s/service-final.yaml

      # Etapa 7: Aplicar Kubernetes manifests
      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f k8s/deployment-final.yaml
          kubectl apply -f k8s/service-final.yaml